from typing import Any, Text, Dict, List
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import SlotSet
import requests
import datetime
import random
import json
import os
from pathlib import Path



def load_jokes():
    try:
        jokes_file = Path("data") / "jokes.yml"
        with open(jokes_file, 'r', encoding='utf-8') as file:
            data = file.read()

            jokes = []
            in_jokes_section = False
            for line in data.split('\n'):
                if line.strip() == "jokes:":
                    in_jokes_section = True
                    continue
                if in_jokes_section and line.strip().startswith("- "):
                    joke = line[2:].strip().strip('"')
                    jokes.append(joke)
            return jokes
    except Exception as e:
        print(f"Error loading jokes: {e}")
        return [
            "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? –ü–æ—Ç–æ–º—É —á—Ç–æ 31 Oct = 25 Dec.",
            "‚Äî –ê–ª–ª–æ, —ç—Ç–æ —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏? ‚Äî –î–∞. ‚Äî –£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º–∞, —è –Ω–µ –º–æ–≥—É... ‚Äî –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä."
        ]


class ActionGetWeather(Action):
    def name(self) -> Text:
        return "action_get_weather"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        city = tracker.get_slot("city")
        if not city:
            dispatcher.utter_message(text="–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–≥–æ–¥—ã.")
            return []


        api_key = "64240a2d35ef1acd0374d6f6f530739d"

        try:
            base_url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric&lang=ru"
            complete_url = f"{base_url}appid={api_key}&q={city}&units=metric&lang=ru"
            response = requests.get(complete_url)
            weather_data = response.json()

            if weather_data["cod"] != 200:
                dispatcher.utter_message(text=f"–ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è {city}.")
                return [SlotSet("city", None)]

            main_data = weather_data["main"]
            temperature = main_data["temp"]
            feels_like = main_data["feels_like"]
            humidity = main_data["humidity"]
            weather_desc = weather_data["weather"][0]["description"].capitalize()

            message = (
                f"–°–µ–π—á–∞—Å –≤ {city}:\n"
                f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
                f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {weather_desc}"
            )

            dispatcher.utter_message(text=message)
        except Exception as e:
            print(f"Error getting weather: {e}")
            dispatcher.utter_message(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ.")

        return [SlotSet("city", None)]


class ActionGetTime(Action):
    def name(self) -> Text:
        return "action_get_time"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        now = datetime.datetime.now()
        current_time = now.strftime("%H:%M")
        current_date = now.strftime("%d.%m.%Y")

        message = f"–°–µ–π—á–∞—Å {current_time}, {current_date}"
        dispatcher.utter_message(text=message)

        return []


class ActionTellJoke(Action):
    def __init__(self):
        self.jokes = load_jokes()

    def name(self) -> Text:
        return "action_tell_joke"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        if not self.jokes:
            dispatcher.utter_message(text="–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –º–µ–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∞–Ω–µ–∫–¥–æ—Ç—ã.")
            return []

        joke = random.choice(self.jokes)
        dispatcher.utter_message(text=joke)

        return []


class ActionAnalyzeMood(Action):
    def name(self) -> Text:
        return "action_analyze_mood"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:


        user_message = tracker.latest_message.get("text")

        if not user_message:
            dispatcher.utter_message(text="–Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.")
            return []


        mood = self.detect_mood(user_message)
        response = self.generate_mood_response(mood)

        dispatcher.utter_message(text=response)
        return []

    def detect_mood(self, text: Text) -> Text:
        text_lower = text.lower()

        positive_words = ["—Ö–æ—Ä–æ—à–æ", "–æ—Ç–ª–∏—á–Ω–æ", "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ", "—Ä–∞–¥–æ—Å—Ç", "—Å—á–∞—Å—Ç–ª–∏–≤", "—É—Ä–∞", "–ª—é–±–ª—é", "–∫–ª–∞—Å—Å–Ω–æ",
                          "–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ"]
        negative_words = ["–ø–ª–æ—Ö–æ", "—É–∂–∞—Å–Ω–æ", "–≥—Ä—É—Å—Ç–Ω–æ", "–Ω–µ—Å—á–∞—Å—Ç", "—Ç–æ—Å–∫–ª–∏–≤–æ", "—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω", "—É—Å—Ç–∞–ª", "–±–µ—Å–∏—Ç"]

        positive_count = sum(word in text_lower for word in positive_words)
        negative_count = sum(word in text_lower for word in negative_words)

        if positive_count > negative_count:
            return "positive"
        elif negative_count > positive_count:
            return "negative"
        else:
            return "neutral"

    def generate_mood_response(self, mood: Text) -> Text:
        responses = {
            "positive": [
                "–ü–æ—Ö–æ–∂–µ, —É –≤–∞—Å –æ—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! üòä",
                "–í–∞—à–∏ —Å–ª–æ–≤–∞ –∑–≤—É—á–∞—Ç –æ—á–µ–Ω—å –ø–æ–∑–∏—Ç–∏–≤–Ω–æ!",
                "–Ø —á—É–≤—Å—Ç–≤—É—é –≤–∞—à—É —Ä–∞–¥–æ—Å—Ç—å! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!"
            ],
            "negative": [
                "–ö–∞–∂–µ—Ç—Å—è, –≤–∞–º —Å–µ–π—á–∞—Å –Ω–µ–ª–µ–≥–∫–æ... üòî",
                "–ü–æ—Ö–æ–∂–µ, —É –≤–∞—Å —Å–ª–æ–∂–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ù–∞–¥–µ—é—Å—å, —Å–∫–æ—Ä–æ —Å—Ç–∞–Ω–µ—Ç –ª—É—á—à–µ.",
                "–í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞–∂–µ—Ç—Å—è –ø–æ–¥–∞–≤–ª–µ–Ω–Ω—ã–º. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å - —è –∑–¥–µ—Å—å."
            ],
            "neutral": [
                "–í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞–∂–µ—Ç—Å—è —Ä–æ–≤–Ω—ã–º. –í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ?",
                "–ù–µ –º–æ–≥—É —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. –•–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ?",
                "–ü–æ—Ö–æ–∂–µ, —É –≤–∞—Å –æ–±—ã—á–Ω—ã–π –¥–µ–Ω—å. –ù–∞–¥–µ—é—Å—å, –æ–Ω —Å—Ç–∞–Ω–µ—Ç –µ—â–µ –ª—É—á—à–µ!"
            ]
        }
        return random.choice(responses[mood])

